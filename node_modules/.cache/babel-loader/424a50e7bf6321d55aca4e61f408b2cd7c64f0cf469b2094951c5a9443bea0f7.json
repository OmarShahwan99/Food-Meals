{"ast":null,"code":"var _jsxFileName = \"/media/omar/special/Projects for new course of React/theSecond/food meals/src/components/Checkout/OrderForm.js\",\n  _s = $RefreshSig$();\nimport classes from './OrderForm.module.css';\nimport useInput from '../../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst textValidation = value => {\n  return value.trim() !== '';\n};\nconst phoneValidation = value => {\n  return value.length === 10;\n};\nconst codeValidation = value => {\n  return value.length === 5;\n};\nconst OrderForm = props => {\n  _s();\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameHasError,\n    blurHandler: nameBlurHandler,\n    valueChangeHandler: nameChangeHandler,\n    reset: resetName\n  } = useInput(textValidation);\n  const {\n    value: enteredPhone,\n    isValid: enteredPhoneIsValid,\n    hasError: phoneHasError,\n    blurHandler: phoneBlurHandler,\n    valueChangeHandler: phoneChangeHandler,\n    reset: resetPhone\n  } = useInput(phoneValidation);\n  const {\n    value: enteredStreet,\n    isValid: enteredStreetIsValid,\n    hasError: streetHasError,\n    blurHandler: streetBlurHandler,\n    valueChangeHandler: streetChangeHandler,\n    reset: resetStreet\n  } = useInput(textValidation);\n  const {\n    value: enteredCode,\n    isValid: enteredCodeIsValid,\n    hasError: codeHasError,\n    blurHandler: codeBlurHandler,\n    valueChangeHandler: codeChangeHandler,\n    reset: resetCode\n  } = useInput(codeValidation);\n  let FormIsValid = false;\n  if (enteredNameIsValid && enteredPhoneIsValid && enteredStreetIsValid) {\n    FormIsValid = true;\n  }\n  const confirmHandler = event => {\n    event.preventDefault();\n    if (!FormIsValid) {\n      return;\n    }\n    console.log(enteredName, enteredPhone);\n    resetName();\n    resetPhone();\n    resetStreet();\n  };\n  const invalidNameClasses = nameHasError ? classes.invalid : '';\n  const invalidPhoneClasses = phoneHasError ? classes.invalid : '';\n  const invalidStreetClasses = streetHasError ? classes.invalid : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes['order-form'],\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: confirmHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: invalidNameClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Your Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          name: \"name\",\n          onChange: nameChangeHandler,\n          onBlur: nameBlurHandler,\n          value: enteredName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), nameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes['error-text'],\n          children: \"Invalid Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 38\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: invalidPhoneClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"phone\",\n          children: \"Your Phone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          id: \"phone\",\n          name: \"phone\",\n          onChange: phoneChangeHandler,\n          onBlur: phoneBlurHandler,\n          value: enteredPhone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), phoneHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes['error-text'],\n          children: \"Phone must have 10 numbers.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: invalidStreetClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"street\",\n          children: \"Street\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"street\",\n          name: \"street\",\n          onChange: streetChangeHandler,\n          onBlur: streetBlurHandler,\n          value: enteredStreet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), streetHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes['error-text'],\n          children: \"Street musn't be empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.control,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"code\",\n          children: \"Pestal Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"code\",\n          name: \"code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !FormIsValid,\n          className: classes.button,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes['button--alt'],\n          onClick: props.onCancel,\n          type: \"button\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_s(OrderForm, \"cZw1nGnVm96t6jLiNHevnBVzozU=\", false, function () {\n  return [useInput, useInput, useInput, useInput];\n});\n_c = OrderForm;\nexport default OrderForm;\nvar _c;\n$RefreshReg$(_c, \"OrderForm\");","map":{"version":3,"names":["classes","useInput","jsxDEV","_jsxDEV","textValidation","value","trim","phoneValidation","length","codeValidation","OrderForm","props","_s","enteredName","isValid","enteredNameIsValid","hasError","nameHasError","blurHandler","nameBlurHandler","valueChangeHandler","nameChangeHandler","reset","resetName","enteredPhone","enteredPhoneIsValid","phoneHasError","phoneBlurHandler","phoneChangeHandler","resetPhone","enteredStreet","enteredStreetIsValid","streetHasError","streetBlurHandler","streetChangeHandler","resetStreet","enteredCode","enteredCodeIsValid","codeHasError","codeBlurHandler","codeChangeHandler","resetCode","FormIsValid","confirmHandler","event","preventDefault","console","log","invalidNameClasses","invalid","invalidPhoneClasses","invalidStreetClasses","className","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","name","onChange","onBlur","control","actions","disabled","button","onClick","onCancel","_c","$RefreshReg$"],"sources":["/media/omar/special/Projects for new course of React/theSecond/food meals/src/components/Checkout/OrderForm.js"],"sourcesContent":["import classes from './OrderForm.module.css';\nimport useInput from '../../hooks/use-input';\n\nconst textValidation = (value) => {\n    return value.trim() !== ''\n}\n\nconst phoneValidation = (value) => {\n    return value.length === 10;\n}\n\nconst codeValidation = (value) => {\n    return value.length === 5;\n}\n\nconst OrderForm = props => {\n    const {\n        value: enteredName,\n        isValid: enteredNameIsValid,\n        hasError: nameHasError,\n        blurHandler: nameBlurHandler,\n        valueChangeHandler: nameChangeHandler,\n        reset: resetName\n    } = useInput(textValidation);\n\n    const {\n        value: enteredPhone,\n        isValid: enteredPhoneIsValid,\n        hasError: phoneHasError,\n        blurHandler: phoneBlurHandler,\n        valueChangeHandler: phoneChangeHandler,\n        reset: resetPhone\n    } = useInput(phoneValidation);\n\n    const {\n        value: enteredStreet,\n        isValid: enteredStreetIsValid,\n        hasError: streetHasError,\n        blurHandler: streetBlurHandler,\n        valueChangeHandler: streetChangeHandler,\n        reset: resetStreet\n    } = useInput(textValidation);\n\n    const {\n        value: enteredCode,\n        isValid: enteredCodeIsValid,\n        hasError: codeHasError,\n        blurHandler: codeBlurHandler,\n        valueChangeHandler: codeChangeHandler,\n        reset: resetCode\n    } = useInput(codeValidation);\n\n    let FormIsValid = false;\n\n    if (enteredNameIsValid && enteredPhoneIsValid && enteredStreetIsValid) {\n        FormIsValid = true;\n    }\n\n    const confirmHandler = event => {\n        event.preventDefault();\n        if (!FormIsValid) {\n            return;\n        }\n        console.log(enteredName, enteredPhone);\n        resetName();\n        resetPhone();\n        resetStreet();\n    }\n\n    const invalidNameClasses = nameHasError ? classes.invalid : ''\n    const invalidPhoneClasses = phoneHasError ? classes.invalid : '';\n    const invalidStreetClasses = streetHasError ? classes.invalid : '';\n\n    return (\n        <div className={classes['order-form']}>\n            <form onSubmit={confirmHandler}>\n                <div className={invalidNameClasses}>\n                    <label htmlFor='name'>Your Name</label>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        onChange={nameChangeHandler}\n                        onBlur={nameBlurHandler}\n                        value={enteredName}\n                    />\n                    {nameHasError && <p className={classes['error-text']}>Invalid Name</p>}\n                </div>\n                <div className={invalidPhoneClasses}>\n                    <label htmlFor='phone'>Your Phone</label>\n                    <input\n                        type=\"tel\"\n                        id=\"phone\"\n                        name=\"phone\"\n                        onChange={phoneChangeHandler}\n                        onBlur={phoneBlurHandler}\n                        value={enteredPhone}\n                    />\n                    {phoneHasError && <p className={classes['error-text']}>Phone must have 10 numbers.</p>}\n                </div>\n                <div className={invalidStreetClasses}>\n                    <label htmlFor='street'>Street</label>\n                    <input\n                        type=\"text\"\n                        id=\"street\"\n                        name=\"street\"\n                        onChange={streetChangeHandler}\n                        onBlur={streetBlurHandler}\n                        value={enteredStreet}\n                    />\n                    {streetHasError && <p className={classes['error-text']}>Street musn't be empty.</p>}\n                </div>\n                <div className={classes.control}>\n                    <label htmlFor='code'>Pestal Code</label>\n                    <input\n                        type=\"text\"\n                        id=\"code\"\n                        name=\"code\" />\n                </div>\n                <div className={classes.actions}>\n                    <button disabled={!FormIsValid} className={classes.button}>Confirm</button>\n                    <button className={classes['button--alt']} onClick={props.onCancel} type=\"button\">Cancel</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default OrderForm"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}